.\" $Id: PAPI_assign_eventset_component.3,v 1.2 2009-09-10 20:19:37 terpstra Exp $
.TH PAPI_assign_eventset_component 3 "April, 2007" "PAPI Programmer's Reference" "PAPI"

.SH NAME
PAPI_assign_eventset_component \- assign a component index to an existing but empty EventSet 

.SH SYNOPSIS
.B C Interface
.nf
.B #include <papi.h>
.BI "PAPI_assign_eventset_component (int "EventSet", int "cidx");"
.fi

.SH DESCRIPTION
.B "PAPI_assign_eventset_component()"
assigns a specific component index, as specified by
.I "cidx,"
to a new EventSet identified by 
.I "EventSet,"
as obtained from
.BR "PAPI_create_eventset" (3).
EventSets are ordinarily automatically bound to components when the first event is added.
This routine is useful to explicitly bind an EventSet to a component before setting component related options. 

.SH ARGUMENTS
.I EventSet
-- An integer identifier for an existing EventSet

.I cidx
-- An integer identifier for a component. By convention, component 0 is always the cpu component.

.SH RETURN VALUES
 On success, this function returns
.B "PAPI_OK."
 On error, a non-zero error code is returned.

.SH ERRORS
.TP
.B "PAPI_ENOCMP"
The argument
.I cidx
is not a valid component.
.TP
.B "PAPI_ENOEVST"
The EventSet doesn't exist.
.TP
.B "PAPI_ENOMEM"
Insufficient memory to complete the operation.

.SH EXAMPLES
.LP
.nf
.if t .ft CW
  int EventSet = PAPI_NULL;

  if (PAPI_create_eventset(&EventSet) != PAPI_OK)
    handle_error(1);

  /* Bind our EventSet to the cpu component */

  if (PAPI_assign_eventset_component(EventSet, 0) != PAPI_OK)
    handle_error(1);

  /* Convert our EventSet to multiplexing */

  if (PAPI_set_multiplex(EventSet) != PAPI_OK)
    handle_error(1);
.if t .ft P
.fi

.SH BUGS
This function has no known bugs.

.SH SEE ALSO
.BR PAPI_create_eventset "(3), " PAPI_add_event "(3), " PAPI_set_multiplex "(3), "  
.BR PAPI_set_opt "(3) " 
